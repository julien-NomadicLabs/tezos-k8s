apiVersion: batch/v1
kind: Job
metadata:
  name: "zip-and-upload"
  namespace: mainnet-shots
spec:
  template:
    metadata:
      labels:
        app: snapshot-maker
    spec:
      serviceAccountName: snapshot-maker-sa
      initContainers:
        - name: init-tezos-filesystem
          image: ""
          command: ["/bin/sh"]
          args:
            - "-c"
            - |
              #!/bin/sh
              set -e

              sudo chown -R 100:100 /snapshot-cache-volume

              trap "exit" SIGINT SIGTERM

              # Strip network from namespace
              NETWORK="${NAMESPACE%%-*}"

              tezos-node config init \
              --config-file /home/tezos/.tezos-node/config.json \
              --network "${NETWORK}" \
              --data-dir /var/tezos/node/data

              tezos-node run --connections 0 --config-file /home/tezos/.tezos-node/config.json --rpc-addr=127.0.0.1:8732 &

              sleep 2m && kill -s SIGINT 1 &

              until wget -qO-  http://localhost:8732/chains/main/blocks/head/header >/dev/null 2>&1; do
                  printf "%s Waiting for node RPC to come online.\n" "$(date "+%Y-%m-%d %H:%M:%S" "$@")"
                  sleep 20
              done

              if ! wget -qO-  http://localhost:8732/chains/main/blocks/head/header >/dev/null 2>&1; then
                printf "%s RPC is not online! Exiting...\n" "$(date "+%Y-%m-%d %H:%M:%S" "$@")"
                exit 1
              else
                printf "%s Node online! Storage is initialized.\n" "$(date "+%Y-%m-%d %H:%M:%S" "$@")"
                wget -qO-  http://localhost:8732/chains/main/blocks/head/header | sed -E 's/.*"hash":"?([^,"]*)"?.*/\1/' > /snapshot-cache-volume/BLOCK_HASH
                wget -qO-  http://localhost:8732/chains/main/blocks/head/header | sed -E 's/.*"level":"?([^,"]*)"?.*/\1/' > /snapshot-cache-volume/BLOCK_HEIGHT
                wget -qO-  http://localhost:8732/chains/main/blocks/head/header | sed -E 's/.*"timestamp":"?([^,"]*)"?.*/\1/' > /snapshot-cache-volume/BLOCK_TIMESTAMP
                /usr/local/bin/tezos-node --version > /snapshot-cache-volume/TEZOS_VERSION
                printf "%s BLOCK_HASH is...$(cat /snapshot-cache-volume/BLOCK_HASH))\n" "$(date "+%Y-%m-%d %H:%M:%S" "$@")"
                printf "%s BLOCK_HEIGHT is...$(cat /snapshot-cache-volume/BLOCK_HEIGHT)\n" "$(date "+%Y-%m-%d %H:%M:%S" "$@")"
                printf "%s BLOCK_TIMESTAMP is...$(cat /snapshot-cache-volume/BLOCK_TIMESTAMP)\n" "$(date "+%Y-%m-%d %H:%M:%S" "$@")"
                printf "%s TEZOS_VERSION is...$(cat /snapshot-cache-volume/TEZOS_VERSION)\n" "$(date "+%Y-%m-%d %H:%M:%S" "$@")"
                sudo chmod -R 755 /snapshot-cache-volume
              fi
          volumeMounts:
            - mountPath: /var/tezos
              name: persistent-storage
            - mountPath: /snapshot-cache-volume
              name: snapshot-cache-volume
          env:
            - name: NAMESPACE
              valueFrom:
                configMapKeyRef:
                  name: snapshot-configmap
                  key: NAMESPACE
      containers:
        - name: create-tezos-rolling-snapshot
          image: ""
          command: ["/bin/sh"]
          args:
            - "-c"
            - |
              #!/bin/sh
              set -e

              sudo chown -R 100:100 /snapshot-cache-volume
              sudo chown -R 100:100 /rolling-tarball-restore

              # Strip network from namespace
              NETWORK="${NAMESPACE%%-*}"

              BLOCK_HEIGHT=$(cat /snapshot-cache-volume/BLOCK_HEIGHT)
              BLOCK_HASH=$(cat /snapshot-cache-volume/BLOCK_HASH)
              ROLLING_SNAPSHOT_NAME="${NETWORK}"-"${BLOCK_HEIGHT}"

              tezos-node config init \
              --config-file /home/tezos/.tezos-node/config.json \
              --network "${NETWORK}" \
              --data-dir /var/tezos/node/data

              if [ "${HISTORY_MODE}" = rolling ]; then
                tezos-node snapshot export \
                --block "${BLOCK_HASH}" \
                --config-file /home/tezos/.tezos-node/config.json \
                --rolling \
                /snapshot-cache-volume/"${ROLLING_SNAPSHOT_NAME}".rolling

                printf "%s Restoring rolling snapshot to empty filesystem for rolling tarball...\n" "$(date "+%Y-%m-%d %H:%M:%S" "$@")"

                touch /rolling-tarball-restore/snapshot-import-in-progress

                tezos-node snapshot import \
                /snapshot-cache-volume/"${ROLLING_SNAPSHOT_NAME}".rolling \
                --block "${BLOCK_HASH}" \
                --config-file /home/tezos/.tezos-node/config.json \
                --data-dir /rolling-tarball-restore/var/tezos/node/data

                rm /rolling-tarball-restore/snapshot-import-in-progress
              else
                printf "%s Skipping rolling snapshot import since this job is for an archive node.\n" "$(date "+%Y-%m-%d %H:%M:%S" "$@")"
              fi
          volumeMounts:
            - mountPath: /var/tezos
              name: persistent-storage
            - mountPath: /snapshot-cache-volume
              name: snapshot-cache-volume
            - mountPath: /rolling-tarball-restore
              name: rolling-tarball-restore
          env:
            - name: HISTORY_MODE
              value: ""
            - name: NAMESPACE
              valueFrom:
                configMapKeyRef:
                  name: snapshot-configmap
                  key: NAMESPACE
        - name: zip-and-upload
          image: 082993323195.dkr.ecr.us-east-2.amazonaws.com/zip-and-upload:latest
          imagePullPolicy: Always
          args:
              - "zip-and-upload"
          volumeMounts:
            - mountPath: /var/tezos
              name: persistent-storage
              readOnly: true
            - mountPath: /snapshot-cache-volume
              name: snapshot-cache-volume
            - mountPath: /rolling-tarball-restore
              name: rolling-tarball-restore
          env:
            - name: HISTORY_MODE
              value: ""
            - name: NAMESPACE
              valueFrom:
                configMapKeyRef:
                  name: snapshot-configmap
                  key: NAMESPACE
      restartPolicy: Never
      volumes:
        - name: persistent-storage
          persistentVolumeClaim:
            claimName: hangzhounet-shots-snap-volume
        - name: snapshot-cache-volume
          persistentVolumeClaim:
            claimName: snapshot-cache-volume
        - name: rolling-tarball-restore
          persistentVolumeClaim:
            claimName: rolling-tarball-restore
  backoffLimit: 0
